.. _bulk_methods:

Bulk methods
=============

The primary object.

.. _initialization:

Initialization
--------------

Initialize bulk.

    .. code-block:: python

        from sfbulk import Bulk

        bulk = Bulk()


Optionally, you can initialize bulk with **bulk_server** and **sessionid** attributes, for details check comments under :ref:`login<login>` method.

    .. code-block:: python

            bulk = Bulk(bulk_server, sessionid)

            # bulk = Bulk(bulk_server=u'https://na15.salesforce.com/',
            #             sessionid=u'00Di0000000kQAQIP_GogAZHj1fMmIkj.Js4haI...')

.. _login:

Login
^^^^^

Before performing any operations bulk must te authorized by login, password and security token.

    .. code-block:: python

            bulk.login('username', 'password','security_token')

            # bulk.login('n.frydrych@clearcode.cc', '123456','ABCDEF')


.. note:: **Security token** should be generated by Salesforce web interface, in section:
    **My Settings** -> **Personal** -> **Reset My Security Token** (token will be delivered in the e-mail message). 

.. warning:: **TEST / SANDBOX ENVIRONMENT**: The test / sandbox environment is running when you give the credentials to that kind of account.


After successfully login attributes **sessionid** and **bulk_server** of **bulk** object are filled up.

    .. code-block:: console

            >>> print bulk.bulk_server
            https://na15.salesforce.com/

            >>> print bulk.sessionid
            00Di0000000kQAQIP_GogAZHj1fMmIkj.Js4haI...


**Session expires after 2 hours (120 mins) period of inactivity**. There may be certain activities that reset this session timeout, so for example, if you once every hour by cron lauch task that use Salesforce Bulk API, **the validity of the session will be renewed**.

Using **sfbulk** you don't have to be aware of this, but **Salesforce Bulk API** does not provide the login process, it is always handle by **Salesforce Rest API**. Rest API has lower limits of requests, so if your task is scheduled for launching frequently, you probably should saved in eg. *cache* or *database* **sessionid** and **bulk_server** data received during the **first login** and use them to the future **bulk** object initiations.


Example with using *mongodb* for saving session data:

    .. code-block:: python

       from mongo import model as m

   
        # check if session data was saved before
        api = {'api': u'soap'}
        config = m.SalesforceConfig.find_one(api)

        if config:
            # session data was saved before
            session = config['session']
            bulk = Bulk(session['bulk_server'], session['sessionid'])
        else:
            # session data was not saved before, so perform login
            bulk.login('username', 'password','security_token')

            session = {'bulk_server': bulk.bulk_server,
                       'sessionid': bulk.sessionid}

            # save session data          
            api.update({'session': session})
            config = m.SalesforceConfig(api)
            config.save()

            # config = {'api': 'soap',
            #           'session': {'bulk_server': ' https://na15.salesforce.com/',
            #                       'sessionid': '00Di0000000kQAQIP_GogAZHj1fMmIkj.Js4haI...'}}


.. warning:: **EXCEPTIONS WHEN LOGIN**:


Job handling
------------

job_create
^^^^^^^^^^

Create job.

    .. code-block:: python

        bulk.job_create(u'insert', u'Campaign')

job_is_completed
^^^^^^^^^^^^^^^^

Check if job is completed.

    .. code-block:: python

        bulk.job_is_completed()

job_close
^^^^^^^^^

Close job.

    .. code-block:: python

        bulk.job_close()

Batch handling
--------------

batch_create
^^^^^^^^^^^^

Create batch.

    .. code-block:: python

        bulk.batch_create(data)

batch_status
^^^^^^^^^^^^

Check status of batch.

    .. code-block:: python

        bulk.batch_status()

    Example response:

    .. code-block:: python

        {u'751i0000001ptNQAAY': {u'apexProcessingTime': u'0',
                                 u'apiActiveProcessingTime': u'0',
                                 u'createdDate': u'2014-05-19T10:16:45.000Z',
                                 u'id': u'751i0000001ptNQAAY',
                                 u'jobId': u'750i0000001S8w8AAC',
                                 u'numberRecordsFailed': u'0',
                                 u'numberRecordsProcessed': u'21',
                                 u'state': u'Completed',
                                 u'systemModstamp': u'2014-05-19T10:16:47.000Z',
                                 u'totalProcessingTime': u'0'}}

batch_result
^^^^^^^^^^^^

Check status of batch.

    .. code-block:: python

        bulk.batch_result()

    Example response:

    .. code-block:: python

        {u'751i0000001ptOTAAY': ['"Id","Success","Created","Error"',
                                 '"501i00000008yqOAAQ","true","false",""',
                                 '"501i0000000iSEyAAM","true","false",""',
                                 '"501i0000000iSEzAAM","true","false",""',
                                 '']}

